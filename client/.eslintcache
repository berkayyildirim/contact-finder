[{"/Users/berkay/Desktop/contact-finder/client/src/index.js":"1","/Users/berkay/Desktop/contact-finder/client/src/App.js":"2","/Users/berkay/Desktop/contact-finder/client/src/components/layout/Navbar.js":"3","/Users/berkay/Desktop/contact-finder/client/src/components/pages/Home.js":"4","/Users/berkay/Desktop/contact-finder/client/src/components/pages/About.js":"5","/Users/berkay/Desktop/contact-finder/client/src/context/contact/ContactState.js":"6","/Users/berkay/Desktop/contact-finder/client/src/context/contact/contactReducer.js":"7","/Users/berkay/Desktop/contact-finder/client/src/context/types.js":"8","/Users/berkay/Desktop/contact-finder/client/src/context/contact/contactContext.js":"9","/Users/berkay/Desktop/contact-finder/client/src/components/contacts/Contacts.js":"10","/Users/berkay/Desktop/contact-finder/client/src/components/contacts/ContactItem.js":"11","/Users/berkay/Desktop/contact-finder/client/src/components/contacts/ContactForm.js":"12","/Users/berkay/Desktop/contact-finder/client/src/components/contacts/ContactFilter.js":"13"},{"size":197,"mtime":1611401322776,"results":"14","hashOfConfig":"15"},{"size":715,"mtime":1611431229313,"results":"16","hashOfConfig":"15"},{"size":718,"mtime":1611405085697,"results":"17","hashOfConfig":"15"},{"size":459,"mtime":1612098906186,"results":"18","hashOfConfig":"15"},{"size":407,"mtime":1611404929449,"results":"19","hashOfConfig":"15"},{"size":2526,"mtime":1612104397542,"results":"20","hashOfConfig":"15"},{"size":1510,"mtime":1612098401866,"results":"21","hashOfConfig":"15"},{"size":401,"mtime":1611429325188,"results":"22","hashOfConfig":"15"},{"size":109,"mtime":1611426645799,"results":"23","hashOfConfig":"15"},{"size":487,"mtime":1611519080089,"results":"24","hashOfConfig":"15"},{"size":1535,"mtime":1611991907318,"results":"25","hashOfConfig":"15"},{"size":2702,"mtime":1612008691059,"results":"26","hashOfConfig":"15"},{"size":777,"mtime":1612104562379,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},"vuvw0c",{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39","usedDeprecatedRules":"30"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42","usedDeprecatedRules":"30"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"30"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"30"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},"/Users/berkay/Desktop/contact-finder/client/src/index.js",[],["60","61"],"/Users/berkay/Desktop/contact-finder/client/src/App.js",[],"/Users/berkay/Desktop/contact-finder/client/src/components/layout/Navbar.js",[],"/Users/berkay/Desktop/contact-finder/client/src/components/pages/Home.js",[],"/Users/berkay/Desktop/contact-finder/client/src/components/pages/About.js",["62"],"import React from 'react'\nimport App from '../../App'\n\nconst About = () => {\n    return (\n        <div>\n            <h1>About This App</h1>\n            <p className=\"my-1\">\n                This is a full stack React app for keeping contacts\n            </p>\n            <p className=\"bg-dark p\">\n                <strong>Version: </strong> 1.0.0\n            </p>\n        </div>\n    )\n}\n\nexport default About;","/Users/berkay/Desktop/contact-finder/client/src/context/contact/ContactState.js",["63"],"import React, {useReducer} from \"react\";\nimport {v4 as uuid} from \"uuid\"; \nimport ContactContext from \"./contactContext\";\nimport contactReducer from \"./contactReducer\";\nimport {\n    ADD_CONTACT,\n    DELETE_CONTACT,\n    SET_CURRENT,\n    CLEAR_CURRENT,\n    UPDATE_CONTACT,\n    FILTER_CONTACTS,\n    CLEAR_FILTER\n} from \"../types\";\nimport { text } from \"express\";\n\nconst ContactState = props => {\n    const initialState = {\n        contacts: [\n            {\n                id: 1,\n                name: \"Jill Johnson\",\n                email: \"jill@gmail.com\",\n                phone: \"111-111-1111\",\n                type: \"personal\"\n            },\n            {\n                id: 2,\n                name: \"Sara Watson\",\n                email: \"sara@gmail.com\",\n                phone: \"222-222-2222\",\n                type: \"personal\"\n            },\n            {\n                id: 3,\n                name: \"Harry White\",\n                email: \"harry@gmail.com\",\n                phone: \"333-333-3333\",\n                type: \"professional\"\n            }\n        ],\n        current: null,\n        filtered: null\n    };\n\n    const [state, dispatch] = useReducer(contactReducer, initialState);\n\n    // Add Contact\n    const addContact = contact => {\n        contact.id =uuid();\n        dispatch({type: ADD_CONTACT, payload: contact});\n    }\n\n    // Delete Contact\n    const deleteContact = id => { \n        dispatch({type: DELETE_CONTACT, payload: id});\n    }\n\n    // Set Current Contact\n    const setCurrent = contact => { \n        dispatch({type: SET_CURRENT, payload: contact});\n    }\n\n    // Clear Current Contect\n    const clearCurrent = () => { \n        dispatch({type: CLEAR_CURRENT});\n    };\n\n    // Update Contact\n    const updateContact = contact => { \n        dispatch({type: UPDATE_CONTACT, payload: contact});\n    };\n\n    // Filter Contacts\n    const filterContacts = text => { \n        dispatch({type: FILTER_CONTACTS, payload: text});\n    };\n\n    // Clear Filter\n    const clearFilter = () => { \n        dispatch({type: CLEAR_FILTER});\n    }\n\n    return (\n        <ContactContext.Provider \n        value={{\n            contacts: state.contacts,\n            current: state.current,\n            filtered: state.filtered,\n            addContact,\n            deleteContact,\n            setCurrent,\n            clearCurrent,\n            updateContact,\n            filterContacts,\n            clearFilter\n            }}>\n            {props.children}\n        </ContactContext.Provider>\n    )\n};\n\nexport default ContactState;","/Users/berkay/Desktop/contact-finder/client/src/context/contact/contactReducer.js",["64"],"import {\n    ADD_CONTACT,\n    DELETE_CONTACT,\n    SET_CURRENT,\n    CLEAR_CURRENT,\n    UPDATE_CONTACT,\n    FILTER_CONTACTS,\n    CLEAR_FILTER\n} from \"../types\";\n\nexport default (state, action) => {\n    switch (action.type) {\n        case ADD_CONTACT:\n            return {\n                ...state,\n                contacts: [...state.contacts, action.payload]\n            };\n        case UPDATE_CONTACT:\n            return {\n                ...state,\n                contacts: state.contacts.map(contact => contact.id === action.payload.id ? action.payload : contact)\n            };\n        case DELETE_CONTACT:\n            return {\n                ...state,\n                contacts: state.contacts.filter(contact => contact.id !== action.payload)\n            };\n        case SET_CURRENT:\n            return {\n                ...state,\n                current: action.payload\n            };\n        case CLEAR_CURRENT:\n            return {\n                ...state,\n                current: null\n            };\n        case FILTER_CONTACTS:\n            return {\n                ...state,\n                filtered: state.contacts.filter(contact => {\n                    const regex = new RegExp(`${action.payload}`, 'gi');\n                    return contact.name.match(regex) || contact.email.match(regex);\n                })\n            };\n        case CLEAR_FILTER:\n            return {\n                ...state,\n                filtered: null\n            };\n        default:\n            return state;\n    }\n};","/Users/berkay/Desktop/contact-finder/client/src/context/types.js",[],"/Users/berkay/Desktop/contact-finder/client/src/context/contact/contactContext.js",[],"/Users/berkay/Desktop/contact-finder/client/src/components/contacts/Contacts.js",[],"/Users/berkay/Desktop/contact-finder/client/src/components/contacts/ContactItem.js",[],["65","66"],"/Users/berkay/Desktop/contact-finder/client/src/components/contacts/ContactForm.js",["67"],"import React, {useState, useContext, useEffect} from 'react'\nimport ContactContext from \"../../context/contact/contactContext\"\nimport { CLEAR_CURRENT } from '../../context/types';\n\nconst ContactForm = () => {\n    const contactContext = useContext(ContactContext);\n\n    const {addContact, updateContact, clearCurrent, current} = contactContext;\n\n    useEffect(() => {\n        if(current !== null) {\n            setContact(current);\n        } else {\n            setContact({\n                name: \"\",\n                email: \"\",\n                phone: \"\",\n                type: \"personal\"\n            });\n        }\n    }, [contactContext, current]);\n\n    const [contact, setContact] = useState({\n        name: \"\",\n        email: \"\",\n        phone: \"\",\n        type: \"personal\"\n    });\n\n    const {name, email, phone, type} = contact;\n\n    const onChange = e => setContact({...contact, [e.target.name]: e.target.value });\n\n    const onSubmit = e => {\n        e.preventDefault();\n        if (current === null) {\n            addContact(contact);\n        } else {\n            updateContact(contact);\n        }\n        clearAll();\n    };\n    \n    const clearAll = () => {\n        clearCurrent();\n    }\n\n    return (\n        <form onSubmit={onSubmit}>\n            <h2 className=\"text-primary\"> {current ? \"Edit Contact\" : \"Add Contact\"} </h2>\n            <input \n            type=\"text\"\n            placeholder=\"Name\"\n            name=\"name\"\n            value={name}\n            onChange={onChange}\n            />\n            <input \n            type=\"email\"\n            placeholder=\"Email\"\n            name=\"email\"\n            value={email}\n            onChange={onChange}\n            />\n            <input \n            type=\"text\"\n            placeholder=\"Phone\"\n            name=\"phone\"\n            value={phone}\n            onChange={onChange}\n            />\n            <h5>Contact Type</h5>\n            <input \n                type=\"radio\" \n                name=\"type\" \n                value=\"personal\" \n                checked={type === \"personal\"} \n                onChange={onChange}\n                />{\" \"}Personal{\" \"}\n            <input \n                type=\"radio\" \n                name=\"type\" \n                value=\"professional\" \n                checked={type === \"professional\"} \n                onChange={onChange}\n                />{\" \"}Professional{\" \"}\n            <div>\n                <input type=\"submit\" value={current ? \"Update Contact\" : \"Add Contact\"} className=\"btn btn-primary btn-block\" />\n            </div>\n\n            {current && <div> <button className=\"btn btn-light btn-block\" onClick={clearAll}>Clear</button> </div>}\n\n        </form>\n    )\n}\n\nexport default ContactForm;","/Users/berkay/Desktop/contact-finder/client/src/components/contacts/ContactFilter.js",[],{"ruleId":"68","replacedBy":"69"},{"ruleId":"70","replacedBy":"71"},{"ruleId":"72","severity":1,"message":"73","line":2,"column":8,"nodeType":"74","messageId":"75","endLine":2,"endColumn":11},{"ruleId":"72","severity":1,"message":"76","line":14,"column":10,"nodeType":"74","messageId":"75","endLine":14,"endColumn":14},{"ruleId":"77","severity":1,"message":"78","line":11,"column":1,"nodeType":"79","endLine":54,"endColumn":3},{"ruleId":"68","replacedBy":"80"},{"ruleId":"70","replacedBy":"81"},{"ruleId":"72","severity":1,"message":"82","line":3,"column":10,"nodeType":"74","messageId":"75","endLine":3,"endColumn":23},"no-native-reassign",["83"],"no-negated-in-lhs",["84"],"no-unused-vars","'App' is defined but never used.","Identifier","unusedVar","'text' is defined but never used.","import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration",["83"],["84"],"'CLEAR_CURRENT' is defined but never used.","no-global-assign","no-unsafe-negation"]